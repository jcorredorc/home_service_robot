#!/bin/sh
xterm  -e  " roslaunch turtlebot_gazebo turtlebot_world.launch world_file:="/home/workspace/catkin_ws/src/home_service_robot/worlds/world_mapping_features.world"" &

export TURTLEBOT_MAP_FILE=/home/workspace/gmapping_01.yaml
roslaunch turtlebot_navigation amcl_demo.launch

 INFO] [1627945685.170616610, 6128.340000000]: No matching device found.... waiting for devices. Reason: std::__cxx11::string openni2_wrapper::OpenNI2Driver::resolveDeviceURI(const string&) @ /tmp/binarydeb/ros-kinetic-openni2-camera-0.4.2/src/openni2_driver.cpp @ 737 : Invalid device number 1, there are 0 devices connected.
[ INFO] [1627945688.170945390, 6130.352000000]: No matching device found.... waiting for devices. Reason: std::__cxx11::string openni2_wrapper::OpenNI2Driver::resolveDeviceURI(const string&) @ /tmp/binarydeb/ros-kinetic-openni2-camera-0.4.2/src/openni2_driver.cpp @ 737 : Invalid device number 1, there are 0 devices connected.
[ WARN] [1627945690.539673648, 6131.979000000]: Timed out waiting for transform from base_footprint to map to become available before running costmap, tf error: canTransform: target_frame map does not exist.. canTransform returned after 0.101 timeout was 0.1.
[ INFO] [1627945691.171423227, 

-------------

/src/openni2_driver.cpp @ 737 : Invalid device number 1, there are 0 devices connected.
[ INFO] [1627945733.177860623, 6160.763000000]: No matching device found.... waiting for devices. Reason: std::__cxx11::string openni2_wrapper::OpenNI2Driver::resolveDeviceURI(const string&) @ /tmp/binarydeb/ros-kinetic-openni2-camera-0.4.2/src/openni2_driver.cpp @ 737 : Invalid device number 1, there are 0 devices connected.
[ WARN] [1627945735.117075710, 6162.120000000]: Timed out waiting for transform from base_footprint to map to become available before running costmap, tf error: canTransform: target_frame map does not exist.. canTransform returned after 0.1 timeout was 0.1.
[ INFO] [1627945736.178182404, 6162.856000000]: No matching device found.... waiting for devices. Reason: std::__cxx11::string openni2_wrapper::OpenNI2Driver::resolveDeviceURI(const string&) @ /tmp/binarydeb/ros-kinetic-openni2-camera-0.4.2/src/openni2_driver.cpp @ 737 : Invalid device number 1, there are 0 devices connected.


----

roslaunch turtlebot_gazebo turtlebot_world.launch 



roslaunch turtlebot_gazebo amcl_demo.launch 



roslaunch turtlebot_rviz_launchers view_navigation.launch






-------


pickup

header: 
  seq: 0
  stamp: 
    secs: 6077
    nsecs: 225000000
  frame_id: "map"
pose: 
  position: 
    x: 4.1003279686
    y: 3.93584132195
    z: 0.0
  orientation: 
    x: 0.0
    y: 0.0
    z: 0.999754962967
    w: -0.0221362603563
---


pickoff
-----
header: 
  seq: 1
  stamp: 
    secs: 6147
    nsecs: 740000000
  frame_id: "map"
pose: 
  position: 
    x: -2.26904654503
    y: 0.0299424827099
    z: 0.0
  orientation: 
    x: 0.0
    y: 0.0
    z: 0.999979287476
    w: 0.00643619605022
---



  // Set our initial shape type to be a cube
  uint32_t shape = visualization_msgs::Marker::CUBE;

  //while (ros::ok())
  //{
    visualization_msgs::Marker marker;
    // Set the frame ID and timestamp.  See the TF tutorials for information on these.
    marker.header.frame_id = "/map";
    marker.header.stamp = ros::Time::now();

    // Set the namespace and id for this marker.  This serves to create a unique ID
    // Any marker sent with the same namespace and id will overwrite the old one
    marker.ns = "basic_shapes";
    marker.id = 0;

    // Set the marker type.  Initially this is CUBE, and cycles between that and SPHERE, ARROW, and CYLINDER
    marker.type = shape;

    // Set the marker action.  Options are ADD, DELETE, and new in ROS Indigo: 3 (DELETEALL)
    marker.action = visualization_msgs::Marker::ADD;

    // Set the pose of the marker.  This is a full 6DOF pose relative to the frame/time specified in the header
    marker.pose.position.x = 4.1003279686;
    marker.pose.position.y = 3.93584132195;
    marker.pose.position.z = 0.0;
    marker.pose.orientation.x = 0.0;
    marker.pose.orientation.y = 0.0;
    marker.pose.orientation.z = 1.0;
    marker.pose.orientation.w = -0.0221362603563;


    // Set the scale of the marker -- 1x1x1 here means 1m on a side
    marker.scale.x = 1.0;
    marker.scale.y = 1.0;
    marker.scale.z = 1.0;

    // Set the color -- be sure to set alpha to something non-zero!
    marker.color.r = 0.0f;
    marker.color.g = 1.0f;
    marker.color.b = 0.0f;
    marker.color.a = 1.0;

    marker.lifetime = ros::Duration(5);
    
    // Publish the marker
    while (marker_pub.getNumSubscribers() < 1)
    {
      if (!ros::ok())
      {
        return 0;
      }
      ROS_WARN_ONCE("Please create a subscriber to the marker");
      sleep(1);
    }
    marker_pub.publish(marker);
    ROS_INFO("Waiting 5 sec. to show the pickup marker");
    ros::Duration(5.0).sleep(); // Wait to pickup the object

// dropoff marker
    marker.pose.position.x = -2.26904654503;
    marker.pose.position.y = 0.0299424827099;
    marker.pose.position.z = 0.0;
    marker.pose.orientation.x = 0.0;
    marker.pose.orientation.y = 0.0;
    marker.pose.orientation.z = 1.0;
    marker.pose.orientation.w = 0.00643619605022;
// Set the color -- be sure to set alpha to something non-zero!
    marker.color.r = 1.0f;
    marker.color.g = 0.0f;
    marker.color.b = 0.0f;
    marker.color.a = 1.0;

    marker_pub.publish(marker);
    ROS_INFO("Waiting 5 sec. to show the dropoff marker");
    ros::Duration(5.0).sleep(); // Wait to dropoff the object

